class Solution:
    # @param {character[][]} matrix
    # @return {integer}
    def maximalSquare(self, matrix):
        m = len(matrix)
        if m == 0:
            return 0
        n = len(matrix[0])

        dp = [[0 for i in range(n+1)] for j in range(m+1)]

        result = 0
        for i in range(m-1,-1,-1):
            for j in range(n-1,-1,-1):
                if matrix[i][j] != "0":
                    v = dp[i+1][j+1]
                    size = 1
                    if v != 0:
                        flag = True
                        for h in range(v):
                            if matrix[i][j+h+1] == "0":
                                flag = False
                                break
                            if matrix[i+h+1][j] == "0":
                                flag = False
                                break
                            size += 1
                       
                    dp[i][j] = size
                    if dp[i][j] > result:
                        result = dp[i][j]

        return result ** 2


        
s = Solution()
m = ["11","11"]
m
print s.maximalSquare(m)
#Maximal Square
#https://leetcode.com/problems/maximal-square/

